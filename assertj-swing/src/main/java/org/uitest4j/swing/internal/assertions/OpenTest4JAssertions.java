/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Copyright 2018 the original author or authors.
 */
package org.uitest4j.swing.internal.assertions;

import org.opentest4j.AssertionFailedError;

import java.util.Arrays;
import java.util.function.Supplier;
import java.util.regex.Pattern;

/**
 * Helper methods for throwing AssertionFailedErrors from OpenTest4J
 *
 * @author Andrew Auclair
 */
public class OpenTest4JAssertions {
	/**
	 * Asserts that the provided value is true.
	 *
	 * @param value          The boolean value to check for being true.
	 * @param failureMessage A {@code Supplied<String>} that provides a failure message when throwing an assert upon failure.
	 * @throws AssertionFailedError if value was false.
	 */
	public static void assertTrue(boolean value, Supplier<String> failureMessage) {
		if (!value) {
			throw new AssertionFailedError(failureMessage.get());
		}
	}

	/**
	 * Asserts that the provided value is false.
	 *
	 * @param value          The boolean value to check for being false.
	 * @param failureMessage A {@code Supplied<String>} that provides a failure message when throwing an assert upon failure.
	 * @throws AssertionFailedError if value was true.
	 */
	public static void assertFalse(boolean value, Supplier<String> failureMessage) {
		if (value) {
			throw new AssertionFailedError(failureMessage.get());
		}
	}

	// throws AssertionFailedError if expected and actual don't match
	public static void assertEquals(Object expected, Object actual, Supplier<String> failureMessage) {
		if ((expected == null && actual != null) || (expected != null && !expected.equals(actual))) {
			throw new AssertionFailedError(failureMessage.get(), expected, actual);
		}
	}

	public static void assertNotEqual(Object expected, Object actual, Supplier<String> failureMessage) {
		if ((expected == null && actual == null) || (expected != null && expected.equals(actual))) {
			throw new AssertionFailedError(failureMessage.get());
		}
	}

	// throws AssertionFailedError if expected and actual don't match
	public static void assertEquals(Object[] expected, Object[] actual, Supplier<String> failureMessage) {
		assertEquals(java.util.Arrays.toString(expected), java.util.Arrays.toString(actual), failureMessage);
	}

	// throws AssertionFailedError if actual doesn't match expected pattern
	public static void assertMatchesPattern(Pattern expected, String actual, Supplier<String> failureMessage) {
		if (!expected.matcher(actual).matches()) {
			throw new AssertionFailedError(failureMessage.get(), expected, actual);
		}
	}
}
